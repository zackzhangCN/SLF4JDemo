<?xml version="1.0" encoding="UTF-8"?>

<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<configuration  scan="true" scanPeriod="10 seconds">
    <!-- 定义日志输出格式：%24表示24小时制，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
    <property name="PATTERN" value="%24(%d{yyyy-MM--dd HH:mm:ss.SSS}) [%thread] %-5level %logger{36} - %msg%n" />
    <!-- 定义日志存储的路径 需要为绝对路径-->
    <property name="FILE_PATH" value="E://IdeaWorkSpace//slf4jdemo2//src//logs" />

    <!-- 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 按照上面配置的LOG_PATTERN来打印日志 -->
            <pattern>${PATTERN}</pattern>
            <!--控制台也要使用u8,不使用gbk,否则会中文乱码-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--RollingFileAppender: 滚动记录文件, 先将日志记录到指定文件, 当符合某个条件时,将日志记录到其他文件 -->
    <!-- 此处为先按日期存日志, 每天一个日志文件,
            当日期变了, 将前一天的日志文件重命名为XXX%日期%索引,新日志仍然是demo.log.
            如果日期没变, 当日志文件大小超过指定值时,对当前日志文件进行分割,重命名,可以调整日志文件大小为1KB进行测试-->
    <appender name="Slf4jDemo" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--在定义的日志存储路径下生成日志文件-->
        <File>${FILE_PATH}/Slf4jDemo.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件的名字会根据fileNamePattern的值,每隔一段时间改变一次-->
            <!--文件名: logs/demo.2019-12-26.0.log -->
            <fileNamePattern>${FILE_PATH}/Slf4jDemo%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件,该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件的最大大小 默认值为10MB-->
                <maxFileSize>1KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!--pattern节点,用来设置日志的输入格式-->
            <pattern>${PATTERN}</pattern>
            <!--记录日志使用的字符集-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--日志级别从低到高: TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出-->

    <!-- 指定控制台日志输出级别 -->
    <root level="DEBUG">
<!--        <appender-ref ref="STDOUT" />-->
    </root>
    <!--指定cn.zack包下发生的日志会进行输出, 以及输出级别-->
    <logger name="cn.zack" level="ERROR" additivity="false">
        <appender-ref ref="Slf4jDemo" />
        <appender-ref ref="STDOUT" />
    </logger>
</configuration>